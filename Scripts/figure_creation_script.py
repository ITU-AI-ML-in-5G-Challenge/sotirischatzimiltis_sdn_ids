# -*- coding: utf-8 -*-
"""figure_creation_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q8LLp1hTSo_Of_l0cQQLmMaaSXFOoKGm
"""

import matplotlib.pyplot as plt
import numpy as np

models = ['DT', 'RF', 'KNN', 'BAG', 'Boost']
precision = [0.879, 0.850051848, 0.871466667, 0.895066667, 0.925733333]
recall = [0.860, 0.859097798, 0.826533333, 0.863066667, 0.886666667]
f1_score = [0.864, 0.846568665, 0.838533333, 0.8712, 0.901333333]
accuracy = [0.858, 0.858166723, 0.825333333, 0.8622, 0.886033333]

import matplotlib.pyplot as plt
import numpy as np

# Model names and corresponding metrics
models = ['DT', 'RF', 'KNN', 'BAG', 'Boost']
precision = [0.879, 0.850051848, 0.871466667, 0.895066667, 0.925733333]
recall = [0.860, 0.859097798, 0.826533333, 0.863066667, 0.886666667]
f1_score = [0.864, 0.846568665, 0.838533333, 0.8712, 0.901333333]
accuracy = [0.858, 0.858166723, 0.825333333, 0.8622, 0.886033333]
bar_width=0.2
# Create a figure and axis
fig, ax = plt.subplots(figsize=(10, 6))

# Define the x positions for each model
x = np.arange(len(models))

# Set the y-axis limits to start from 0.6
plt.ylim(0.7, 1.0)  # Adjust the upper limit as needed (1.0 for full range)

# Plot the bars for each metric
bars_precision = plt.bar(x - bar_width, precision, bar_width, label='Precision', color='royalblue', edgecolor='black', linewidth=1)
bars_recall = plt.bar(x, recall, bar_width, label='Recall', color='forestgreen', edgecolor='black', linewidth=1)
bars_f1_score = plt.bar(x + bar_width, f1_score, bar_width, label='F1-Score', color='tomato', edgecolor='black', linewidth=1)
bars_accuracy = plt.bar(x + 2 * bar_width, accuracy, bar_width, label='Accuracy', color='gold', edgecolor='black', linewidth=1)

# Set labels, title, and legend
plt.xlabel('Models', fontsize=20)
plt.ylabel('Metrics', fontsize=20)
plt.xticks(x, models)
plt.legend(fontsize=16, loc='upper left', bbox_to_anchor=(0.00, 0.50))


# Find the highest value for each metric
max_precision = max(precision)
max_recall = max(recall)
max_f1_score = max(f1_score)
max_accuracy = max(accuracy)

# Annotate the highest values on the bars
for bars, metric, max_value in zip([bars_precision, bars_recall, bars_f1_score, bars_accuracy],
                                   ['Precision', 'Recall', 'F1-Score', 'Accuracy'],
                                   [max_precision, max_recall, max_f1_score, max_accuracy]):
    for bar in bars:
        height = bar.get_height()
        if height == max_value:
            ax.annotate(f'{height:.2f}', xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3), textcoords='offset points', ha='center', fontsize=12, fontweight='bold')
plt.yticks(fontsize=20)
plt.xticks(fontsize=20)
plt.legend(fontsize=20)
# Save the plot in high quality for LaTeX
plt.tight_layout()
plt.savefig('metrics_plot.png', dpi=300)  # Change the format as needed (e.g., .pdf for vector graphics)

# Display the plot (optional)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data from the table
models = ['DT Resampled', 'DT Resampled Reduced', 'Bagging Resampled Reduced', 'Baggining Baseline Reduced']
precision = [0.8980, 0.9000, 0.8947, 0.9307]
recall = [0.8787, 0.8773, 0.8767, 0.8627]
f1_score = [0.8720, 0.8720, 0.8680, 0.8853]
accuracy = [0.8773, 0.8773, 0.8761, 0.8615]

# Create a figure and axis
fig, ax = plt.subplots(figsize=(10, 6))

# Set the width of the bars
bar_width = 0.2

# Define the x positions for each model
x = np.arange(len(models))

# Plot the bars for each metric
bars_precision = plt.bar(x - bar_width, precision, bar_width, label='Precision', color='royalblue', edgecolor='black', linewidth=1)
bars_recall = plt.bar(x, recall, bar_width, label='Recall', color='forestgreen', edgecolor='black', linewidth=1)
bars_f1_score = plt.bar(x + bar_width, f1_score, bar_width, label='F1-Score', color='tomato', edgecolor='black', linewidth=1)
bars_accuracy = plt.bar(x + 2 * bar_width, accuracy, bar_width, label='Accuracy', color='gold', edgecolor='black', linewidth=1)

# Set labels, title, and legend
plt.xlabel('Models', fontsize=20)
plt.ylabel('Metrics', fontsize=20)
plt.xticks(x, models, rotation=30,  fontsize=16)
plt.legend(fontsize=16, loc='upper left', bbox_to_anchor=(0.00, 0.50))
# Set the y-axis limits to start from 0.6
plt.yticks(fontsize=20)
plt.ylim(0.70, 1.0)  # Adjust the upper limit as needed (1.0 for full range)
# Find the highest value for each metric
max_precision = max(precision)
max_recall = max(recall)
max_f1_score = max(f1_score)
max_accuracy = max(accuracy)

# Annotate the highest values on the bars
for bars, metric, max_value in zip([bars_precision, bars_recall, bars_f1_score, bars_accuracy],
                                   ['Precision', 'Recall', 'F1-Score', 'Accuracy'],
                                   [max_precision, max_recall, max_f1_score, max_accuracy]):
    for bar in bars:
        height = bar.get_height()
        if height == max_value:
            ax.annotate(f'{height:.2f}', xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3), textcoords='offset points', ha='center', fontsize=14, fontweight='bold')

# Save the plot in high quality for LaTeX
plt.tight_layout()
plt.savefig('metrics_plot.png', dpi=300)  # Change the format as needed (e.g., .pdf for vector graphics)

# Display the plot (optional)
plt.show()

